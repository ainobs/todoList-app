{"version":3,"sources":["component/List.js","App.js","reportWebVitals.js","index.js"],"names":["List","items","deleteItem","update","map","item","type","value","text","onChange","e","target","id","onClick","App","useState","todo","setTodo","todoList","setTodoList","className","onSubmit","preventDefault","newItem","Date","now","completed","trim","placeholder","test","filter","boo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAmBeA,EAjBF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,OAE9B,OACIF,EAAMG,KAAI,SAACC,GACP,OAAO,gCACH,uBACIC,KAAK,OACLC,MAAOF,EAAKG,KACZC,SAAU,SAACC,GAAD,OAAOP,EAAOO,EAAEC,OAAOJ,MAAOF,EAAKO,OAEjD,wBAAQC,QAAS,kBAAMX,EAAWG,EAAKO,KAAvC,iBANaP,EAAKO,QCiDnBE,EAnDL,WAAM,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAkCb,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAMC,SAhCS,SAACX,GAClBA,EAAEY,iBAEF,IAAMC,EAAU,CACdX,GAAIY,KAAKC,MACTjB,KAAMQ,EACNU,WAAW,GAGVV,EAAKW,SACNR,EAAY,GAAD,mBAAKD,GAAL,CAAeK,KAC1BN,EAAQ,MAqBR,UACE,uBACEX,KAAK,OACLsB,YAAY,uBACZrB,MAAQS,EACRP,SAAW,SAACC,GAAMO,EAAQP,EAAEC,OAAOJ,UAErC,0CAEF,cAAC,EAAD,CAAMN,MAAOiB,EAAUhB,WAxBR,SAACU,GAClB,IAAIiB,EAAOX,EAASY,QAAO,SAACpB,GAAD,OAAMA,EAAEE,KAAOA,KAC1CO,EAAYU,IAsBuC1B,OAnB1C,SAACK,EAAMI,GAChB,IAAImB,EAAMb,EAASd,KAAI,SAACC,GACnBA,EAAKO,KAAOA,IACbP,EAAKG,KAAOA,MAGhBS,EAAQc,UCxBGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8ef59fe8.chunk.js","sourcesContent":["import './List.css';\r\n\r\nconst List = ({items, deleteItem, update}) => {\r\n   \r\n    return ( \r\n        items.map((item) => {\r\n            return <div key={item.id}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={item.text}\r\n                    onChange={(e) => update(e.target.value, item.id)}\r\n                />\r\n                <button onClick={() => deleteItem(item.id)}>x</button>\r\n            </div>\r\n            \r\n        })\r\n    )\r\n}\r\n \r\nexport default List;","import { useState } from 'react';\nimport './App.css';\nimport List from './component/List';\n\nlet App = ()=> {\n  const [todo, setTodo] = useState('');\n  const [todoList, setTodoList] = useState([]);\n\n  let handleSubmit = (e)=> {\n    e.preventDefault();\n\n    const newItem = {\n      id: Date.now(),\n      text: todo,\n      completed: false\n    }\n    // TO ALLOW ONLY TEXTS TO BE INSERTED INTO THE TODO LIST\n    if(todo.trim()) {\n      setTodoList([...todoList, newItem]);\n      setTodo('');\n    }\n    \n  }\n\n  //DELETE ITEM FUNCTION\n  let handleDelete = (id) => {\n    let test = todoList.filter((e)=> e.id !== id);\n    setTodoList(test);\n  }\n\n  let test = (text, id) => {\n    let boo = todoList.map((item) => {\n      if(item.id === id) {\n        item.text = text;\n      }\n    })\n    setTodo(boo);\n  }\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input \n          type=\"text\" \n          placeholder=\"Create a new todo...\"\n          value= {todo}\n          onChange= {(e)=> {setTodo(e.target.value)}}\n        />\n        <button>+</button>\n      </form>\n      <List items={todoList} deleteItem={handleDelete} update={test}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}